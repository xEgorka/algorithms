# -- ПРИНЦИП РАБОТЫ --

# Осуществляется поиск вершины подлежащей удалению по заданному ключу.
# По условию задачи целевая функция должна вернуть корень измененного
# дерева. Это свойство используется в поиске: если заданный ключ меньше
# корня, то значение левого потомка присваивается корню левого
# измененного дерева, то есть функция запускается рекурсивно, иначе если
# заданный ключ больше корня, то значение правого потомка будет равно
# корню правого измененного дерева.

# Если заданный ключ равен переданному в функцию корню, то
# рассматривается два случая. Если потомок единственный, правый или
# левый, то для того, чтобы удалить заданный ключ требуется вернуть из
# функции потомка, который и будет корнем измененного дерева.

# Во втором случае потомков два. Для того чтобы дерево осталось
# деревом поиска, удаляемую вершину надо заменить максимальным
# значением из левого поддерева, то есть самой правой вершиной в левом
# поддереве. Замена производится поэтапно: выполняется поиск самой
# правой вершины в левом поддереве, значение удаляемой вершины
# заменяется на значение найденной ноды, а левому потомку удаляемой
# вершины присваивается корень левого дерева измененного после
# удаления самой правой вершины, то есть функция запускается
# рекурсивно. Удаление в случае такой замены производится путем
# редактирования значения удаляемой вершины, то есть объект ноды
# остается прежним, поэтому изменение ссылки из родителя на удаляемую
# вершину не требуется.

# После обработки двух случаев функция возвращает корень измененного
# дерева. Если заданный ключ в дереве не найден, функция ничего не
# возвращает и дерево не изменяется.


# -- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --

# Требования задачи выполняются. Рассматривается бинарное дерево
# поиска, в котором хранятся ключи — уникальные целые числа. Удаляется
# вершина с заданным ключом из дерева так, что дерево остается
# корректным бинарным деревом поиска. Если ключа в дереве нет, то
# дерево не изменяется. На вход функции подаётся корень дерева и ключ,
# который надо удалить. Функция возращает корень изменённого дерева.


# -- ВРЕМЕННАЯ СЛОЖНОСТЬ --

# Сложность удаления узла составляет О(h), где h – высота дерева,
# которая может быть равна количеству нод в несбалансированном дереве.


# -- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --

# Алгоритм не использует дополнительную память.

# При поиске глубина рекурсии равна высоте дерева h в худшем случае,
# поэтому программа расходует O(h) памяти на стеке.


# https://contest.yandex.ru/contest/24810/run-report/70719295/
class Node:
    def __init__(self, left=None, right=None, value=0):
        self.right = right
        self.left = left
        self.value = value


def remove(root, key):
    if not root:
        return
    if root.value > key:
        root.left = remove(root.left, key)
    elif root.value < key:
        root.right = remove(root.right, key)
    else:
        if not root.left:
            return root.right
        if not root.right:
            return root.left
        P = root.left
        while P.right:
            P = P.right
        root.value = P.value
        root.left = remove(root.left, P.value)
    return root


def main() -> int:
    node1 = Node(None, None, 2)
    node2 = Node(node1, None, 3)
    node3 = Node(None, node2, 1)
    node4 = Node(None, None, 6)
    node5 = Node(node4, None, 8)
    node6 = Node(node5, None, 10)
    node7 = Node(node3, node6, 5)
    newHead = remove(node7, 10)
    assert newHead.value == 5
    assert newHead.right is node5
    assert newHead.right.value == 8
    return 0


if __name__ == '__main__':
    main()
