# -- ПРИНЦИП РАБОТЫ --

# Поисковая система разработана на основе хэш-таблиц из стандартной
# библиотеки.

# По документам, каждый из которых представляет собой текст из слов,
# строится поисковый индекс. Индекс представляет собой словарь: к
# каждому слову входящему в документы соотносится хэш-таблица,
# сопоставляющая номер документа и количество раз, которое слово
# встречается в этом документе.

# Программа принимает на вход поисковый запрос — некоторый набор слов,
# который фильтруется в уникальный набор слов, по ним производится
# оценка релевантности документов и вывод топ 5 результатов.

# Релевантность документа оценивается следующим образом: для каждого
# уникального слова из запроса берётся число его вхождений в документ,
# полученные числа для всех слов из запроса суммируются. Итоговая
# сумма является релевантностью документа. Чем больше сумма, тем
# больше документ подходит под запрос.

# Сортировка документов на выдаче производится по убыванию
# релевантности. Если релевантности документов совпадают —– то по
# возрастанию их порядковых номеров в базе (то есть во входных
# данных).


# -- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --

# Поиско́вая систе́ма (англ. search engine) — алгоритмы и реализующая их
# совокупность компьютерных программ, предоставляющая пользователю
# возможность быстрого доступа к необходимой ему информации при помощи
# поиска в обширной коллекции доступных данных.

# Принцип работы попадает под определение поисковой системы и
# соответствует требованиям из задачи.


# -- ВРЕМЕННАЯ СЛОЖНОСТЬ --

# Индексирование одного слова стоит O(1).

# Оценка релевантности по одному слову из запроса зависит от
# популярности слова среди документов: чем популярнее слово, тем
# больше времени отнимает формирование списка релевантных документов,
# в худшем случае пропорционально количеству документов в базе, с
# учетом дополнительного времени на сортировку результатов O(NlogN) в
# сумме за O(N).


# -- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --

# Индексирование не требует дополнительной памяти.
# Под результаты поиска в худшем случае выделяется О(N) памяти.


# https://contest.yandex.ru/contest/24414/run-report/75183065/
from typing import List


class SearchEngine:
    def __init__(self) -> None:
        self.idx = {}

    def index(self, doc: int, words: List[str]) -> None:
        for w in words:
            if w not in self.idx:
                self.idx[w] = {}
            if doc not in self.idx[w]:
                self.idx[w][doc] = 0
            self.idx[w][doc] += 1

    def search(self, query: set) -> None:
        r = {}
        for w in query:
            if w in self.idx:
                for doc, cnt in self.idx[w].items():
                    if doc not in r:
                        r[doc] = 0
                    r[doc] += cnt
        r = [r[0] for r in sorted(r.items(), key=lambda x: (-x[1], x[0]))][0:5]
        print(*r)


def main() -> int:
    engine = SearchEngine()
    n = int(input())
    [engine.index(x + 1, list(input().split())) for x in range(n)]
    m = int(input())
    [engine.search(set(input().split())) for _ in range(m)]
    return 0


if __name__ == '__main__':
    main()
